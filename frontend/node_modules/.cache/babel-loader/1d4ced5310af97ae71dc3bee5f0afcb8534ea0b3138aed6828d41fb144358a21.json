{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\codefest2k25hackathon\\\\frontend\\\\src\\\\components\\\\TaskStatusChart.js\";\nimport React from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nconst TaskStatusChart = ({\n  tasks = []\n}) => {\n  // Calculate task status distribution\n  const getTaskStats = () => {\n    const completed = tasks.filter(task => task.completed).length;\n\n    // For non-completed tasks, determine if they're \"In Progress\" or \"Not Started\"\n    const pendingTasks = tasks.filter(task => !task.completed);\n\n    // Tasks with deadlines in the future are considered \"In Progress\"\n    // Tasks without deadlines or with past deadlines are \"Not Started\"\n    const inProgress = pendingTasks.filter(task => {\n      if (!task.deadline) return false; // No deadline = not started\n      const deadline = new Date(task.deadline);\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      const taskDate = new Date(deadline.getFullYear(), deadline.getMonth(), deadline.getDate());\n      return taskDate >= today; // Future or today = in progress\n    }).length;\n    const notStarted = pendingTasks.length - inProgress;\n    return {\n      completed,\n      inProgress,\n      notStarted,\n      total: tasks.length\n    };\n  };\n  const stats = getTaskStats();\n\n  // Chart configuration\n  const data = {\n    labels: ['Completed', 'In Progress', 'Not Started'],\n    datasets: [{\n      data: [stats.completed, stats.inProgress, stats.notStarted],\n      backgroundColor: ['#4caf50',\n      // Green for completed\n      '#2196f3',\n      // Blue for in progress\n      '#ff9800' // Orange for not started\n      ],\n      borderColor: ['#4caf50', '#2196f3', '#ff9800'],\n      borderWidth: 2,\n      hoverBackgroundColor: ['#66bb6a', '#42a5f5', '#ffb74d'],\n      hoverBorderColor: ['#388e3c', '#1976d2', '#f57c00'],\n      hoverBorderWidth: 3\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom',\n        labels: {\n          padding: 20,\n          font: {\n            size: 12,\n            weight: '500'\n          },\n          color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim() || '#333',\n          usePointStyle: true,\n          pointStyle: 'circle'\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleColor: 'white',\n        bodyColor: 'white',\n        borderColor: 'rgba(255, 255, 255, 0.2)',\n        borderWidth: 1,\n        callbacks: {\n          label: function (context) {\n            const label = context.label || '';\n            const value = context.parsed || 0;\n            const percentage = stats.total > 0 ? Math.round(value / stats.total * 100) : 0;\n            return `${label}: ${value} tasks (${percentage}%)`;\n          }\n        }\n      }\n    },\n    cutout: '60%',\n    elements: {\n      arc: {\n        borderJoinStyle: 'round'\n      }\n    },\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    }\n  };\n\n  // Center text for total tasks\n  const centerTextPlugin = {\n    id: 'centerText',\n    beforeDraw: function (chart) {\n      const {\n        width,\n        height,\n        ctx\n      } = chart;\n      ctx.restore();\n      const fontSize = Math.min(width, height) / 8;\n      ctx.font = `bold ${fontSize}px Arial`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n\n      // Use theme-aware colors\n      const primaryColor = getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim() || '#333';\n      const secondaryColor = getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim() || '#666';\n      ctx.fillStyle = primaryColor;\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      // Draw total number\n      ctx.fillText(stats.total.toString(), centerX, centerY - fontSize / 4);\n\n      // Draw \"Tasks\" label\n      ctx.font = `${fontSize / 3}px Arial`;\n      ctx.fillStyle = secondaryColor;\n      ctx.fillText('Tasks', centerX, centerY + fontSize / 3);\n      ctx.save();\n    }\n  };\n\n  // Don't render chart if no tasks\n  if (stats.total === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-chart-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-tasks-chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-tasks-icon\",\n          children: \"\\uD83D\\uDCCA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-tasks-text\",\n          children: \"No tasks to display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-tasks-subtext\",\n          children: \"Create your first task to see the chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83D\\uDCCA Task Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"summary-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"summary-dot completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), stats.completed, \" Completed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"summary-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"summary-dot in-progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), stats.inProgress, \" In Progress\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"summary-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"summary-dot not-started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), stats.notStarted, \" Not Started\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options,\n        plugins: [centerTextPlugin]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_c = TaskStatusChart;\nexport default TaskStatusChart;\nvar _c;\n$RefreshReg$(_c, \"TaskStatusChart\");","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsxDEV","_jsxDEV","register","TaskStatusChart","tasks","getTaskStats","completed","filter","task","length","pendingTasks","inProgress","deadline","Date","now","today","getFullYear","getMonth","getDate","taskDate","notStarted","total","stats","data","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","padding","font","size","weight","color","getComputedStyle","document","documentElement","getPropertyValue","trim","usePointStyle","pointStyle","tooltip","titleColor","bodyColor","callbacks","label","context","value","parsed","percentage","Math","round","cutout","elements","arc","borderJoinStyle","animation","animateRotate","animateScale","centerTextPlugin","id","beforeDraw","chart","width","height","ctx","restore","fontSize","min","textAlign","textBaseline","primaryColor","secondaryColor","fillStyle","centerX","centerY","fillText","toString","save","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Development/codefest2k25hackathon/frontend/src/components/TaskStatusChart.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst TaskStatusChart = ({ tasks = [] }) => {\r\n  // Calculate task status distribution\r\n  const getTaskStats = () => {\r\n    const completed = tasks.filter(task => task.completed).length;\r\n    \r\n    // For non-completed tasks, determine if they're \"In Progress\" or \"Not Started\"\r\n    const pendingTasks = tasks.filter(task => !task.completed);\r\n    \r\n    // Tasks with deadlines in the future are considered \"In Progress\"\r\n    // Tasks without deadlines or with past deadlines are \"Not Started\"\r\n    const inProgress = pendingTasks.filter(task => {\r\n      if (!task.deadline) return false; // No deadline = not started\r\n      const deadline = new Date(task.deadline);\r\n      const now = new Date();\r\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n      const taskDate = new Date(deadline.getFullYear(), deadline.getMonth(), deadline.getDate());\r\n      return taskDate >= today; // Future or today = in progress\r\n    }).length;\r\n    \r\n    const notStarted = pendingTasks.length - inProgress;\r\n    \r\n    return {\r\n      completed,\r\n      inProgress,\r\n      notStarted,\r\n      total: tasks.length\r\n    };\r\n  };\r\n\r\n  const stats = getTaskStats();\r\n\r\n  // Chart configuration\r\n  const data = {\r\n    labels: ['Completed', 'In Progress', 'Not Started'],\r\n    datasets: [\r\n      {\r\n        data: [stats.completed, stats.inProgress, stats.notStarted],\r\n        backgroundColor: [\r\n          '#4caf50', // Green for completed\r\n          '#2196f3', // Blue for in progress\r\n          '#ff9800', // Orange for not started\r\n        ],\r\n        borderColor: [\r\n          '#4caf50',\r\n          '#2196f3',\r\n          '#ff9800',\r\n        ],\r\n        borderWidth: 2,\r\n        hoverBackgroundColor: [\r\n          '#66bb6a',\r\n          '#42a5f5',\r\n          '#ffb74d',\r\n        ],\r\n        hoverBorderColor: [\r\n          '#388e3c',\r\n          '#1976d2',\r\n          '#f57c00',\r\n        ],\r\n        hoverBorderWidth: 3,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'bottom',\r\n        labels: {\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n            weight: '500',\r\n          },\r\n          color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim() || '#333',\r\n          usePointStyle: true,\r\n          pointStyle: 'circle',\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: 'white',\r\n        bodyColor: 'white',\r\n        borderColor: 'rgba(255, 255, 255, 0.2)',\r\n        borderWidth: 1,\r\n        callbacks: {\r\n          label: function(context) {\r\n            const label = context.label || '';\r\n            const value = context.parsed || 0;\r\n            const percentage = stats.total > 0 ? Math.round((value / stats.total) * 100) : 0;\r\n            return `${label}: ${value} tasks (${percentage}%)`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    cutout: '60%',\r\n    elements: {\r\n      arc: {\r\n        borderJoinStyle: 'round',\r\n      },\r\n    },\r\n    animation: {\r\n      animateRotate: true,\r\n      animateScale: true,\r\n    },\r\n  };\r\n\r\n  // Center text for total tasks\r\n  const centerTextPlugin = {\r\n    id: 'centerText',\r\n    beforeDraw: function(chart) {\r\n      const { width, height, ctx } = chart;\r\n      ctx.restore();\r\n      \r\n      const fontSize = Math.min(width, height) / 8;\r\n      ctx.font = `bold ${fontSize}px Arial`;\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'middle';\r\n      \r\n      // Use theme-aware colors\r\n      const primaryColor = getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim() || '#333';\r\n      const secondaryColor = getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim() || '#666';\r\n      \r\n      ctx.fillStyle = primaryColor;\r\n      \r\n      const centerX = width / 2;\r\n      const centerY = height / 2;\r\n      \r\n      // Draw total number\r\n      ctx.fillText(stats.total.toString(), centerX, centerY - fontSize / 4);\r\n      \r\n      // Draw \"Tasks\" label\r\n      ctx.font = `${fontSize / 3}px Arial`;\r\n      ctx.fillStyle = secondaryColor;\r\n      ctx.fillText('Tasks', centerX, centerY + fontSize / 3);\r\n      \r\n      ctx.save();\r\n    },\r\n  };\r\n\r\n  // Don't render chart if no tasks\r\n  if (stats.total === 0) {\r\n    return (\r\n      <div className=\"task-chart-container\">\r\n        <div className=\"no-tasks-chart\">\r\n          <div className=\"no-tasks-icon\">📊</div>\r\n          <div className=\"no-tasks-text\">No tasks to display</div>\r\n          <div className=\"no-tasks-subtext\">Create your first task to see the chart</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"task-chart-container\">\r\n      <div className=\"chart-header\">\r\n        <h4>📊 Task Overview</h4>\r\n        <div className=\"chart-summary\">\r\n          <span className=\"summary-item\">\r\n            <span className=\"summary-dot completed\"></span>\r\n            {stats.completed} Completed\r\n          </span>\r\n          <span className=\"summary-item\">\r\n            <span className=\"summary-dot in-progress\"></span>\r\n            {stats.inProgress} In Progress\r\n          </span>\r\n          <span className=\"summary-item\">\r\n            <span className=\"summary-dot not-started\"></span>\r\n            {stats.notStarted} Not Started\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"chart-wrapper\">\r\n        <Doughnut \r\n          data={data} \r\n          options={options} \r\n          plugins={[centerTextPlugin]}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskStatusChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}